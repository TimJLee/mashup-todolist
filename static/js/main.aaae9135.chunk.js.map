{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","Remove","TodoItemBlock","CheckCircle","props","css","Text","TodoItem","onClick","React","memo","TodoListBlock","TodoList","todos","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","autoFocdus","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaae9135.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n  width: 512px;\n  height: 768px;\n\n  position: relative; /* 추후 박스 하단에 추가 버튼을 위치시키기 위한 설정 */\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\n\n  margin: 0 auto; /* 페이지 중앙에 나타나도록 설정 */\n\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n\nfunction TodoTemplate({ children }) {\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\n}\n\nexport default TodoTemplate;","import React, { useReducer, createContext, useContext, useRef } from 'react';\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: '프로젝트 생성하기',\n    done: true\n  },\n  {\n    id: 2,\n    text: '컴포넌트 스타일링하기',\n    done: true\n  },\n  {\n    id: 3,\n    text: 'Context 만들기',\n    done: false\n  },\n  {\n    id: 4,\n    text: '기능 구현하기',\n    done: false\n  }\n];\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      return state.concat(action.todo);\n    case 'TOGGLE':\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\n      );\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst TodoStateContext = createContext();\nconst TodoDispatchContext = createContext();\nconst TodoNextIdContext = createContext();\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const nextId = useRef(5);\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\nexport function useTodoState() {\n    const context = useContext(TodoStateContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n  }\n  \n  export function useTodoDispatch() {\n    const context = useContext(TodoDispatchContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n  }\n\n  export function useTodoNextId() {\n    const context = useContext(TodoNextIdContext);\n    if (!context) {\n        throw new Error('Cannot find TodoProvider');\n    }\n    return context;\n  }","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoHeadBlock = styled.div`\n  padding-top: 48px;\n  padding-left: 32px;\n  padding-right: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #e9ecef;\n  h1 {\n    margin: 0;\n    font-size: 36px;\n    color: #343a40;\n  }\n  .day {\n    margin-top: 4px;\n    color: #868e96;\n    font-size: 21px;\n  }\n  .tasks-left {\n    color: #20c997;\n    font-size: 18px;\n    margin-top: 40px;\n    font-weight: bold;\n  }\n`;\n\nfunction TodoHead() {\n  const todos = useTodoState();\n  const undoneTasks = todos.filter(todo => !todo.done); // 체크 안되어있는 task 들을 필터링 하는 작업. \n  \n  const today = new Date();\n  const dateString = today.toLocaleDateString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n  const dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\n\n  return (\n    <TodoHeadBlock>\n      <h1>{dateString}</h1>\n      <div className=\"day\">{dayName}</div>\n      <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\n    </TodoHeadBlock>\n  );\n}\n\nexport default TodoHead;","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md'; // 꽤 괜찮은 디자인 버튼임\nimport { useTodoDispatch } from '../TodoContext';\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6; // color hexa 에서 컬러 값 관찰 가능\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n  display: none;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      display: initial; //아이템 항목에 마우스 올렸을 때 오른쪽에 휴지통 아이콘 나오는 기능\n    }\n  }\n`;\n\nconst CheckCircle = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 16px;\n  border: 1px solid #ced4da;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${props =>\n    props.done &&\n    css`\n      border: 1px solid #38d9a9;\n      color: #38d9a9;\n    `}\n`;\n\nconst Text = styled.div`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  ${props =>\n    props.done &&\n    css`\n      color: #ced4da;\n    `}\n`;\n\nfunction TodoItem({ id, done, text }) {\n  const dispatch = useTodoDispatch();\n  const onToggle = () => dispatch({ type: 'TOGGLE', id });\n  const onRemove = () => dispatch({ type: 'REMOVE', id });\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={done} onClick={onToggle}>\n          {done && <MdDone />}\n      </CheckCircle> {/* && - 전자 값이 참이면 후자를 출력하고, 전자가 거짓이면 전자 값 출력 */}\n      <Text done={done}>{text}</Text> {/* Text 컴포넌트에, 매개변수로 받은 done 값을 넘겨주는 방식이다. 이 값을 가지고 상태값에 따라 스타일이 변경됨. */}\n      <Remove onClick={onRemove}>\n        <MdDelete />\n      </Remove>\n    </TodoItemBlock>\n  );\n}\n\nexport default React.memo(TodoItem);","import React from 'react';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n  \n`;\n\nfunction TodoList() {\n    const todos = useTodoState();\n\n    return (\n      <TodoListBlock>\n        {todos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            id={todo.id}\n            text={todo.text}\n            done={todo.done}\n          />\n        ))}\n    </TodoListBlock>\n    );\n}\n\nexport default TodoList;","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\n\nconst CircleButton = styled.button`\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;\n  }\n  &:active {\n    background: #20c997;\n  }\n\n  z-index: 5;\n  cursor: pointer;\n  width: 80px;\n  height: 80px;\n  display: block;\n  align-items: center;\n  justify-content: center;\n  font-size: 60px;\n  position: absolute;\n  left: 50%;\n  bottom: 0px;\n  transform: translate(-50%, 50%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: 0.125s all ease-in;\n  ${props =>\n    props.open &&\n    css`\n      background: #ff6b6b;\n      &:hover {\n        background: #ff8787;\n      }\n      &:active {\n        background: #fa5252;\n      }\n      transform: translate(-50%, 50%) rotate(45deg); // 추가 버튼을 클릭했을 시에 translate 를 통해 추가 버튼으로 모양이 변경되는 코드. \n    `}\n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n`;\n\nconst InsertForm = styled.form`\n  background: #f8f9fa;\n  padding-left: 32px;\n  padding-top: 32px;\n  padding-right: 32px;\n  padding-bottom: 72px;\n\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline: none;\n  font-size: 18px;\n  box-sizing: border-box;\n`;\n\nfunction TodoCreate() {\n  const [open, setOpen] = useState(false); // useState(false 또는 0 또는 '' 는 state의 자료형 지정 하는 것이다.)\n                                           // 각각 boolean, number, string. 아마 상태의 디폴트 값은 각각 거짓 일 듯 하다. \n  const [value, setValue] = useState('');\n\n  const dispatch = useTodoDispatch();\n  const nextId = useTodoNextId();\n\n  const onToggle = () => setOpen(!open);\n  const onChange = e => setValue(e.target.value);\n  const onSubmit = e => {\n    e.preventDefault(); // 새로고침 방지\n    dispatch({\n      type: 'CREATE',\n      todo: {\n        id: nextId.current,\n        text: value,\n        done: false\n      }\n    });\n    setValue('');\n    setOpen(false);\n    nextId.current += 1;\n  };\n\n  return (\n    <>\n      {open && (\n        <InsertFormPositioner>\n          <InsertForm onSubmit={onSubmit}>\n            <Input \n              autoFocdus \n              placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\n              onChange={onChange}\n              value={value}\n            />\n          </InsertForm>\n        </InsertFormPositioner>\n      )}\n      <CircleButton onClick={onToggle} open={open}> {/* create circle button 을 클릭하면, toggle 메소드가 발동되면서 onToggle 함수 작동.\n      그리고 해당 함수에서는 open 상태 값을 가지고 식별자로 활용하여, 만약 open 값이 참이라면 버튼의 모양을 transition 을 통해서 플러스 버튼으로 변경.\n      이때, setOpen parameter 를 보면, 불린 값이 반대로 변하는 것을 확인 할 수 있다.  */}\n        <MdAdd />\n      </CircleButton>\n    </>\n  );\n}\n\nexport default React.memo(TodoCreate);","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead'; // 컴포넌트 가져오기\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`; // 스타일 컴포넌트\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle /> {/* 스타일 컴포넌트 사용 */}\n      <TodoTemplate>\n        <TodoHead /> \n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>   \n    </TodoProvider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}